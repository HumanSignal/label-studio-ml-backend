name: "Release: Pipeline"

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Commit SHA or ref name or tag'
        required: true
        default: 'master'
        type: string
  release:
    types:
      - released

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.pull_request.head.ref || github.ref }}
  cancel-in-progress: true

env:
  DOCKER_BUILD_CONFIG_BRANCH: "master"
  DOCKER_BUILD_CONFIG_PATH: ".github/docker-build-config.yml"
  DOCKER_EXAMPLES_DIRECTORY: "label_studio_ml/examples"

jobs:
  build-image:
    name: Build image
    if: needs.calculate_matrix.outputs.matrix-include != '[]'
    needs: calculate_matrix
    runs-on: ${{ matrix.runs_on || 'ubuntu-latest' }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.calculate_matrix.outputs.matrix-include) }}
    env:
      IMAGE_NAME: heartexlabs/label-studio-ml-backend
      backend_dir_name: ${{ matrix.backend_dir_name }}
      backend_tag_prefix: ${{ matrix.backend_tag_prefix }}
    steps:
      - uses: hmarr/debug-action@v3.0.0

      - uses: actions/checkout@v5
        with:
          ref: "${{ inputs.ref || github.ref_name }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Login to DockerHub
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: docker/login-action@v3.6.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        uses: docker/build-push-action@v6.18.0
        id: docker_build_and_push
        env:
          DOCKER_BUILD_CHECKS_ANNOTATIONS: "false"
          DOCKER_BUILD_SUMMARY: "false"
          DOCKER_BUILD_RECORD_UPLOAD: "false"
        with:
          context: "${{ env.DOCKER_EXAMPLES_DIRECTORY }}/${{ env.backend_dir_name }}"
          tags: "heartexlabs/label-studio-ml-backend:${{ matrix.backend_tag_prefix }}${{ inputs.ref || github.ref_name }}"
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  calculate_matrix:
    name: "Calculate build matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix-include: ${{ steps.matrix.outputs.matrix-include }}
    steps:
      - uses: hmarr/debug-action@v3.0.0

      - run: npm install js-yaml

      - name: Build matrix
        id: matrix
        uses: actions/github-script@v8
        with:
          script: |
            const yaml = require('js-yaml');

            const {owner, repo} = context.repo;
            
            const default_branch = process.env.DOCKER_BUILD_CONFIG_BRANCH;
            const docker_build_config_path = process.env.DOCKER_BUILD_CONFIG_PATH;
            
            const docker_build_config_blob = await github.rest.repos.getContent({
              owner: owner,
              repo: repo,
              ref: default_branch,
              path: docker_build_config_path,
            });
            const docker_build_config_content = Buffer.from(docker_build_config_blob.data.content, docker_build_config_blob.data.encoding).toString("utf8");
            const docker_build_config = yaml.load(docker_build_config_content);
            
            core.setOutput("matrix-include", docker_build_config);

  build-pypi:
    name: "Build"
    permissions:
      contents: write
    uses: ./.github/workflows/build-pypi.yml
    with:
      version: ${{ github.ref_name }}
      ref: ${{ github.ref_name }}
      upload_to_pypi: true
      release-id: ${{ github.event.release.id }}
    secrets: inherit
